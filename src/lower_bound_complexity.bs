<pre class='metadata'>
Title: Improve complexity guarantees for `std::lower_bound()` on non-random-access iterators.
Shortname: Pxxxx
Revision: 0
Status: NP
Date: 2024-01-22
Group: WG21
Audience: SG9, LWG
Editor: Iuri Chaer, iuri.chaer@gmail.com
!Source: [ichaer/cpp-proposals](https://github.com/ichaer/cpp-proposals/blob/master/src/lower_bound-complexity.bs)
Markup Shorthands: markdown on
Abstract: Change algorithmic complexity guarantees for `std::lower_bound()` on non-random-access iterators to better reflect its real cost and allow improvement.
</pre>

Introduction {#intro}
=======================

The current complexity guarantee of `std::lower_bound()` states (27.8.4.2 [lower.bound] of [[!N4950]]):

<blockquote>
*Complexity*: At most log‚ÇÇ(last - first) + ùí™(1) comparisons and projections.
</blockquote>

That complexity guarantee, as it stands, effectively enforces the use of classic binary search to implement the function. However, for non-random-access iterators the requirement of pre-computing the length of the iterator range to be able to run that algorithm means that the effective complexity is given by:

<blockquote>
<math display="inline" alttext="\theta = log_2(N) \times comparison\_cost + 2 \times N \times iteration\_cost">
    <mrow>
        <msub><mi>log</mi><mrow><mn>2</mn></mrow></msub><mi>N</mi>
        <mo>√ó</mo><mi>comparison_cost</mi>
        <mo>+</mo>
        <mn>2</mn><mo>√ó</mo><mi>N</mi>
        <mo>√ó</mo><mi>iteration_cost</mi>
    </mrow>
</math>
</math>
</blockquote>


With the algorithmic complexity being dominated by iterator mutations, the current wording in the standard is ineffective in guaranteeing its performance, while at the same time being too strict to allow innovation &mdash; it would be valuable to decrease the multiplier of the linear factor, namely the number of iterator mutations, even if it meant having a larger constant multiplier for the logarithmic factor (ie the number of comparisons and projections).


Motivation and scope {#motivation-and-scope}
============================================

There is scope for improvement of `std::lower_bound()`'s complexity guarantees for non-random-access iterators independent of any specific algorithm proposals. However, the proximate motivation for this paper is an attempt to introduce in LLVM's libc++ implementation of the standard library the use of one-sided binary search [[Chaer1]], as documented in [[Skiena1]], to obtain a modest improvement in worst-case scenario complexity, and a much more radical improvement to the best-case complexity:
<table>
<thead>
<tr><th></th><th colspan=2>Best case</th><th colspan=2>Worst case</th></tr>
<tr><th rowspan=2>Algorithm</th><th>Comparisons</th><th>Iterations</th><th>Comparisons</th><th>Iterations</th></tr>
</thead>
<tbody>
<tr><td>Classic</td><td>*log‚ÇÇ(N)*</td><td>*2 √ó N*</td><td>*log‚ÇÇ(N)*</td><td>*2 √ó N*</td></tr>
<tr><td>One-sided</td><td>*1*</td><td>*1*</td><td>*2√ólog‚ÇÇ(N)*</td><td>*N*</td></tr>
</tbody>
</table>

In the worst-case scenario the overall number of steps required for one-sided binary search grows linearly with the input size, which is unavoidable for non-random-access iterators, but the growth rate is half of that presented by classic binary search. The number of comparisons grows logarithmically, just like with classic binary search, but with a constant multiplicative factor of *2*, meaning that, although one-sided binary search unambiguously scales better than the classic version, it may be more expensive than the latter when the number of elements in a container is small relative to the cost of comparing them. Implementation-specific time measurements are presented in the next section.

Implementation experience {#implementation-experience}
======================================================

The use of one-sided binary search in `std::lower_bound()` for non-random-access iterators is in use in closed-source software, and is part of a code change submission to LLVM's libc++ implementation of the standard library [[Chaer1]].

The closed-source software in question is Splunk, the change has been in use in production systems since August 2023, and it has resolved serious scalability issues with a component which layers a large number of `std::set`s on top of each other, triggering expensive computation on the intersection. The specific scenario consists of one set growing as multiple sets are merged into it, such that most operations are between one very large set and one that is much smaller. The performance impact is what would be expected when changing from linear to logarithmic complexity: the layering of `std::set`s is no longer a bottleneck.

I submitted a patch to libc++ to make `std::lower_bound()` use one-sided binary search for non-random-access iterators. That patch violates the complexity guarantee of `std::lower_bound()` before this proposal, leading the libc++ maintainers to reject it, but that would be reconsidered it if this proposal were adopted.

I have submitted another patch to libc++ to make `std::set_intersection()` use one-sided binary search for all iterator types, which doesn't violate any of the standard library's complexity guarantees. As of April 2024, that patch is being reviewed and a decision on whether to accept it is still pending.

## Use in `std::set_intersection()` ## {#set_intersection}

The libc++ library currently implements the classic `std::set_intersection()` algorithm, which linearly scans both iterator ranges in parallel, incrementing one or the other (or both) as each element is found not to be less than the other. The complexity of the classic algorithm is, in all cases:

<blockquote>
<math display="inline" alttext="Comparisons = 2 \times ((last1 - first1) + (last2 - first2)) - 1">
    <mrow>
        <mi>Comparisons</mi><mo>=</mo>
        <mn>2</mn>
        <mo>√ó</mo>
        <mo>(</mo><mo>(</mo>
        <mi>last1</mi><mo>-</mo><mi>first1</mi>
        <mo>)</mo>
        <mo>+</mo>
        <mo>(</mo>
        <mi>last2</mi><mo>-</mo><mi>first2</mi>
        <mo>)</mo><mo>)</mo>
        <mo>-</mo><mn>1</mn>
    </mrow>
</math>
<br/>
<math display="inline" alttext="Iterator mutations = (last1 - first1) + (last2 - first2)">
    <mrow>
        <mi>Iterator mutations</mi><mo>=</mo>
        <mo>(</mo>
        <mi>last1</mi><mo>-</mo><mi>first1</mi>
        <mo>)</mo>
        <mo>+</mo>
        <mo>(</mo>
        <mi>last2</mi><mo>-</mo><mi>first2</mi>
        <mo>)</mo>
    </mrow>
</math>
</blockquote>

The version using one-sided binary search, however, has different best-case and worst-case complexity. In the worst case, which happens when the less-than operator keeps switching values when comparing consecutive elements from the input ranges, such that there is no opportunity to enjoy the benefits from the binary search:

<blockquote>
<math display="inline" alttext="Comparisons = 2 \times ((last1 - first1) + (last2 - first2)) - 1">
    <mrow>
        <mi>Comparisons</mi><mo>=</mo>
        <mn>2</mn>
        <mo>√ó</mo>
        <mo>(</mo><mo>(</mo>
        <mi>last1</mi><mo>-</mo><mi>first1</mi>
        <mo>)</mo>
        <mo>+</mo>
        <mo>(</mo>
        <mi>last2</mi><mo>-</mo><mi>first2</mi>
        <mo>)</mo><mo>)</mo>
        <mo>-</mo><mn>1</mn>
    </mrow>
</math>
<br/>
<math display="inline" alttext="Iterator mutations = 1.5 \times ((last1 - first1) + (last2 - first2)) - 1">
    <mrow>
        <mi>Iterator mutations</mi><mo>=</mo>
        <mn>1.5</mn>
        <mo>√ó</mo>
        <mo>(</mo><mo>(</mo>
        <mi>last1</mi><mo>-</mo><mi>first1</mi>
        <mo>)</mo>
        <mo>+</mo>
        <mo>(</mo>
        <mi>last2</mi><mo>-</mo><mi>first2</mi>
        <mo>)</mo><mo>)</mo>
    </mrow>
</math>
</blockquote>


That worst-case complexity can be easily derived from a more complex equation, which depends on the sizes of the ranges on which the benefits from one-sided binary search can be observed:

<blockquote>
<math display="inline" alttext="Comparisons = \overset{n}{\underset{i=0}{\sum}}\log_{2}(len_{i})">
    <mrow>
        <mi>Comparisons</mi><mo>=</mo>
        <munderover accent="true" accentunder="true">
            <mo largeop="true" symmetric="true">‚àë</mo>
            <mrow>
                <mi>i</mi><mo>=</mo><mn>2</mn>
            </mrow>
            <mrow><mi>n</mi></mrow>
        </munderover>
        <mo>(</mo><mn>2</mn><mo>√ó</mo>
        <mo>‚åà</mo>
        <msub><mi>log</mi><mrow><mn>2</mn></mrow></msub><mo>(</mo>
        <mrow><msub><mi>len</mi><mrow><mi>i</mi></mrow></msub></mrow>
        <mo>+</mo><mn>1</mn>
        <mo>)</mo><mo>‚åâ</mo>
        <mo>-</mo><mn>1</mn>
        <mo>)</mo>
</math>
<br/>
<i>Where len<sub>i</sub> is the length of the </i>i<i>th longest consecutive range from either input which cannot be extended, preserving its ordering, by inserting an element from the other range within its bounds.</i>
</blockquote>

From this equation we can also observe that, although the number of comparisons in the worst-case scenario matches the classic algorithm, all other scenarios have sublinear algorithmic complexity in that regard.

The number of iterator mutations follows a similar equation for random-access iterators, multiplied by a factor of *1.5*, making the overall algorithm's complexity sublinear for a wide range of inputs.

While all of this is interesting in the context of `std::set_intersection()`, it's important to keep in mind that this proposal is for a change to `std::lower_bound()`'s complexity guarantees: it's not even thinkable to use classic binary search in this context. While there is certainly room for discussing the tradeoffs in using one-sided binary search in `std::set_intersection()`, the algorithm is powerful enough to change the range of viable applications for `std::lower_bound()`.


## Experimental use of one-sided binary search in `std::lower_bound()` ## {#lower_bound_bench}

The original libc++ library change proposal is preserved in [[Chaer2]], and the existing `std::lower_bound()` benchmark program from the LLVM repository was modified to demonstrate its impact (see <a href=https://github.com/ichaer/llvm-project-onesided_lower_bound/blob/b97697a6d63a2a490738987eaa3d7420248848af/libcxx/benchmarks/algorithms/lower_bound.bench.cpp>*lower_bound.bench.cpp* revision b97697a</a> for the source code). CPU time was measured for `std::lower_bound()` locating elements from `std:set`s with 6 different value types, and of 8 different sizes in the [1, 2<sup>18</sup>] range. All tests were executed on a "11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz" CPU with its auto-scaling functionality disabled.

<table style="border:none;">
    <tr>
        <td style="border:none;"><img alt="Time vs. size graph for std::set<uint32_t>" src="lower_bound_uint32.svg" width=482px height=298px></td>
        <td style="border:none;"><img alt="Time vs. size graph for std::set<uint64_t>" src="lower_bound_uint64.svg" width=482px height=298px></td>
    </tr>
    <tr>
        <td style="border:none;"><img alt="Time vs. size graph for std::set<float>" src="lower_bound_float.svg" width=482px height=298px></td>
        <td style="border:none;"><img alt="Time vs. size graph for std::set<pair<uint32_t, uint32_t>>" src="lower_bound_pair.svg" width=482px height=298px></td>
    </tr>
    <tr>
        <td style="border:none;"><img alt="Time vs. size graph for std::set<std::set<tuple<uint32_t, uint64_t, uint32_t>>>" src="lower_bound_tuple.svg" width=482px height=298px></td>
        <td style="border:none;"><img alt="Time vs. size graph for std::set<std::string>" src="lower_bound_string.svg" width=482px height=298px></td>
    </tr>
</table>

<details>
<summary>Raw data</summary>
<table>
<thead>
<tr><th colspan=2></th><th colspan=2>Time (ns)</th></tr>
<tr><th rowspan=2>Type</th><th rowspan=2>Size</th><th>Classic</th><th>One-sided</th></tr>
</thead>
<tbody>
<tr><td>name&lt;cpu_time&gt;</td><td>time_unit</td><td></td><td></tr></td>
<tr><td>std::set&lt;float&gt;</td><td>1</td><td>157.841033935583</td><td>155.150051117167</tr></td>
<tr><td>std::set&lt;float&gt;</td><td>4</td><td>225.52050781255</td><td>219.645721435627</tr></td>
<tr><td>std::set&lt;float&gt;</td><td>16</td><td>645.258483886769</td><td>590.656616210927</tr></td>
<tr><td>std::set&lt;float&gt;</td><td>64</td><td>2123.96801757812</td><td>1946.63037109374</tr></td>
<tr><td>std::set&lt;float&gt;</td><td>256</td><td>7883.3388671875</td><td>6882.17089843746</tr></td>
<tr><td>std::set&lt;float&gt;</td><td>1024</td><td>31574.7265624999</td><td>27090.3281250001</tr></td>
<tr><td>std::set&lt;float&gt;</td><td>16384</td><td>645827.625000001</td><td>507287.500000001</tr></td>
<tr><td>std::set&lt;float&gt;</td><td>262144</td><td>15195462.4375</td><td>9071708.81249999</tr></td>
<tr><td>std::set&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt;</td><td>1</td><td>162.188838958799</td><td>161.847568511872</tr></td>
<tr><td>std::set&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt;</td><td>4</td><td>260.938751220734</td><td>271.034957885762</tr></td>
<tr><td>std::set&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt;</td><td>16</td><td>616.962158203104</td><td>581.088989257781</tr></td>
<tr><td>std::set&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt;</td><td>64</td><td>2171.63232421878</td><td>1806.88525390623</tr></td>
<tr><td>std::set&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt;</td><td>256</td><td>7746.10937500001</td><td>6673.02050781253</tr></td>
<tr><td>std::set&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt;</td><td>1024</td><td>31003.2031250001</td><td>25712.8437500001</tr></td>
<tr><td>std::set&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt;</td><td>16384</td><td>642202.5</td><td>530180.8125</tr></td>
<tr><td>std::set&lt;std::pair&lt;uint32_t, uint32_t&gt;&gt;</td><td>262144</td><td>15409862</td><td>10871770.6875</tr></td>
<tr><td>std::set&lt;std::string&gt;</td><td>1</td><td>197.436843872118</td><td>197.073902130046</tr></td>
<tr><td>std::set&lt;std::string&gt;</td><td>4</td><td>313.590896606468</td><td>270.086929321417</tr></td>
<tr><td>std::set&lt;std::string&gt;</td><td>16</td><td>724.393310546954</td><td>665.274780273511</tr></td>
<tr><td>std::set&lt;std::string&gt;</td><td>64</td><td>2438.77050781245</td><td>2219.0539550783</tr></td>
<tr><td>std::set&lt;std::string&gt;</td><td>256</td><td>9282.77441406229</td><td>8338.58984375021</tr></td>
<tr><td>std::set&lt;std::string&gt;</td><td>1024</td><td>41040.6757812514</td><td>35348.5781250006</tr></td>
<tr><td>std::set&lt;std::string&gt;</td><td>16384</td><td>921738.374999998</td><td>859987.124999995</tr></td>
<tr><td>std::set&lt;std::string&gt;</td><td>262144</td><td>43657717.4999999</td><td>39776752.7500001</tr></td>
<tr><td>std::set&lt;std::tuple&lt;uint32_t, uint64_t, uint32_t&gt;&gt;</td><td>1</td><td>182.622070312649</td><td>177.043598175048</tr></td>
<tr><td>std::set&lt;std::tuple&lt;uint32_t, uint64_t, uint32_t&gt;&gt;</td><td>4</td><td>224.463363647458</td><td>219.369308471706</tr></td>
<tr><td>std::set&lt;std::tuple&lt;uint32_t, uint64_t, uint32_t&gt;&gt;</td><td>16</td><td>658.733215331987</td><td>630.211730957027</tr></td>
<tr><td>std::set&lt;std::tuple&lt;uint32_t, uint64_t, uint32_t&gt;&gt;</td><td>64</td><td>2129.89941406248</td><td>1873.48974609375</tr></td>
<tr><td>std::set&lt;std::tuple&lt;uint32_t, uint64_t, uint32_t&gt;&gt;</td><td>256</td><td>7906.57714843747</td><td>6883.60253906256</tr></td>
<tr><td>std::set&lt;std::tuple&lt;uint32_t, uint64_t, uint32_t&gt;&gt;</td><td>1024</td><td>33145.0390625002</td><td>27847.89453125</tr></td>
<tr><td>std::set&lt;std::tuple&lt;uint32_t, uint64_t, uint32_t&gt;&gt;</td><td>16384</td><td>671663.4375</td><td>515817.9375</tr></td>
<tr><td>std::set&lt;std::tuple&lt;uint32_t, uint64_t, uint32_t&gt;&gt;</td><td>262144</td><td>24468278.0625</td><td>11235433</tr></td>
<tr><td>std::set&lt;uint32_t&gt;</td><td>1</td><td>179.178524017321</td><td>195.396003723181</tr></td>
<tr><td>std::set&lt;uint32_t&gt;</td><td>4</td><td>231.760955810497</td><td>226.139038086014</tr></td>
<tr><td>std::set&lt;uint32_t&gt;</td><td>16</td><td>639.681213378884</td><td>566.204895019543</tr></td>
<tr><td>std::set&lt;uint32_t&gt;</td><td>64</td><td>2113.84741210939</td><td>1813.38891601566</tr></td>
<tr><td>std::set&lt;uint32_t&gt;</td><td>256</td><td>7884.30859375006</td><td>6674.29492187507</tr></td>
<tr><td>std::set&lt;uint32_t&gt;</td><td>1024</td><td>31406.90625</td><td>26385.5859375</tr></td>
<tr><td>std::set&lt;uint32_t&gt;</td><td>16384</td><td>635306.562499999</td><td>476300.249999999</tr></td>
<tr><td>std::set&lt;uint32_t&gt;</td><td>262144</td><td>15404765.0625</td><td>8844881.8125</tr></td>
<tr><td>std::set&lt;uint64_t&gt;</td><td>1</td><td>193.389709472601</td><td>189.393211364809</tr></td>
<tr><td>std::set&lt;uint64_t&gt;</td><td>4</td><td>224.608291626161</td><td>217.471572875998</tr></td>
<tr><td>std::set&lt;uint64_t&gt;</td><td>16</td><td>629.315612793026</td><td>575.697875976568</tr></td>
<tr><td>std::set&lt;uint64_t&gt;</td><td>64</td><td>2039.05761718751</td><td>1796.75268554687</tr></td>
<tr><td>std::set&lt;uint64_t&gt;</td><td>256</td><td>7781.46777343752</td><td>6572.19628906252</tr></td>
<tr><td>std::set&lt;uint64_t&gt;</td><td>1024</td><td>30737.58984375</td><td>27896.6562499998</tr></td>
<tr><td>std::set&lt;uint64_t&gt;</td><td>16384</td><td>641660.5625</td><td>472708.875</tr></td>
<tr><td>std::set&lt;uint64_t&gt;</td><td>262144</td><td>15515018.625</td><td>10473658.125</tr></td>
</tbody>
</table>
</details>

Nearly all graphs show increasing divergence between the original version, implementing classic binary search, and the one using one-sided binary search, consistent with the expectation from the slope change for the most relevant factor of the algorithmic complexity. The notable exception is `std::set<std::string>`, where comparisons are much more expensive, and loading string contents from memory has a complex interaction with CPU cache contents, giving the time vs. size curves for both algorithms a less linear aspect than for the other types, with the one-sided binary search algorithm following almost parallel to the classic algorithm, albeit consistently faster. The speedup for the simpler types is satisfyingly close to the *2x* improvement predicted.


Alternative: expose one-sided binary search directly {#alternative}
===================================================================

Standard library support for searching over unbounded ranges in ùí™*(log‚ÇÇN)* is an attractive proposition which members of the Std-Proposals mailing list <a href="https://lists.isocpp.org/std-proposals/2024/01/8860.php">were quick to point out</a>. Arthur O'Dwyer suggested, as a concrete example, the potential for searching over generators such as `std::ranges::iota_view` &mdash; a new `std::streaming_lower_bound()` function. Personally, I believe that is a very worthy proposal on its own, but it doesn't detract from the use of the same algorithm to increase the range of application of the more general `std::lower_bound()`. In the same context, concerns have been raised about the complexity tradeoffs presented by one-sided binary search: twice the number of comparisons in exchange for a reduction from linear to logarithmic growth in iteration steps, keeping in mind that comparisons are likely to be orders of magnitude more expensive than iterator increments. Thinking of the principles of algorithmic complexity analysis alone, that concern is clearly misplaced. If comparisons are 4 times as expensive as each iterator increment, all we need are twice as many elements for one-sided binary search to beat the classic algorithm, and if comparisons are 1 thousand times more expensive, as little as 10 times as many elements would be enough to compensate for the difference. The fact that memory availability has historically outpaced processing power ([[McCallum]], [[Rupp]]) gives creedence to this reasoning. Benchmark results presented in the previous section provide experimental confirmation that the lower-order terms relating input size to processing time are not large enough, in practice, to invalidate these conclusions.


Proposed wording {#proposed-wording}
====================================

The proposed changes are relative to the working draft of the standard as of [[!N4950]].

Modify the complexity guarantee in 27.8.4.2 [lower.bound] as follows:

<blockquote>
*Complexity*: At most log‚ÇÇ(last - first) + ùí™(1) comparisons and projections<ins> when invoked with random-access iterators. For all other iterator types, ùí™(log‚ÇÇ(last - first)) comparisons and projections and ùí™(last - first) iterator mutations</ins>.
</blockquote>


Future work {#future-work}
==========================

One-sided binary search is interesting enough to stand on its own, and it would be worthwhile considering exposing it independently in the standard library for unbounded ranges, for use in all iterator types, and so that developers can rely on its specific complexity characteristics.


<pre class=biblio>
{
    "Skiena1": {
        "authors": ["Steven S. Skiena"],
        "title": "The Algorithm Design Manual",
        "publisher": "Springer",
        "type": "Book",
        "chapter": "4.9.2"
    },
    "Chaer1": {
        "authors": ["Iuri Chaer"],
        "href": "https://github.com/llvm/llvm-project/pull/75230",
        "title": "Pull Request: [libc++] Introduce one-sided binary search for set_intersection so that it can be completed in sub-linear time for a large class of inputs",
        "publisher": "LLVM Project"
    },
    "Chaer2": {
        "authors": ["Iuri Chaer"],
        "href": "https://github.com/ichaer/llvm-project-onesided_lower_bound/pull/1",
        "title": "Pull Request: Use one-sided binary search for lower_bound on non-random iterators"
    },
    "McCallum": {
        "authors": ["John McCallum"],
        "href": "https://jcmit.net/memoryprice.htm",
        "title": "Memory Prices 1957+"
    },
    "Rupp": {
        "authors": ["Karl Rupp"],
        "href": "https://github.com/karlrupp/microprocessor-trend-data",
        "title": "Microprocessor Trend Data"
    }
}
</pre>
